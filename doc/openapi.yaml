openapi: 3.0.4
info:
  title: PhotoSync API
  description: API for uploading, editing and accessing photos.
  version: 0.2.0
  contact:
    name: Mateusz PiÄ™tka
    email: matipietka@gmail.com
servers:
  - url: /v1
    description: locally deployed server
paths:
  /login:
    post:
      summary: logins user into API
      requestBody:
        description: user credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "200":
          description: user successfully logged in
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/JWT"
        "400":
          description: invalid request
        "401":
          description: user does not exist or invalid password was given
        "500":
          description: server error

  /register:
    post:
      summary: registers user on the server
      requestBody:
        description: user credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "200":
          description: user successfully registered
        "400":
          description: invalid request
        "401":
          description: user already exists
        "500":
          description: server error

  /upload:
    post:
      summary: uploads a photo to a server
      security:
        - tokenAuth: []
      requestBody:
        description: contains the filename and modification date from the client's file system and the file itself
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: string
                  description: name of the file
                  example: cat.jpg
                modification_date:
                  type: string
                  description: timestamp from the client filesystem, it will be used when the file lacks metadata indicating its creation time
                  example: "2025.05.16 12:30:45"
                file:
                  type: string
                  description: |
                    image or video <br>
                    following MIMETypes are supported:
                      - image/jpeg
                  format: binary
            encoding:
              file:
                contentType: image/jpeg
      responses:
        "200":
          description: file was successfully uploaded
          content:
            text/plain:
              schema:
                type: integer
                description: id of the photo
                example: 102
        "400":
          description: invalid request
        "401":
          description: file is unsupported
        "402":
          description: file already exists
        "403":
          description: token expired or is invalid
        "500":
          description: server error

components:
  schemas:
    UserCredentials:
      type: object
      properties:
        username:
          type: string
          example: username
        password:
          type: string
          example: password
    JWT:
      type: string
      description: |
        Token returned by /login endpoint. <br>
        It contains:
         1. user_id
         2. username
         3. expiration_time
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHBpcmF0aW9uX3RpbWUiOiIxNzU0NDAwNDQ4IiwidXNlcl9pZCI6IjEiLCJ1c2VybmFtZSI6InVzZXIxMjMifQ.mhu0xDAodyBNiGMyw2EkmT3ZMfq24EkV5o3RDZnN4Sg
  securitySchemes:
    tokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT