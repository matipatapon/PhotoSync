openapi: 3.0.4
info:
  title: Photo storage API
  description: API for uploading, editing and accessing photos.
  version: 0.1.0
  contact:
    name: Mateusz PiÄ™tka
    email: matipietka@gmail.com
servers:
  - url: /v1
    description: locally deployed server
paths:
  /login:
    post:
      summary: logins user into API
      requestBody:
        description: user credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "200":
          description: user successfully logged in
          content:
            text/plain:
              schema:
                type: string
                description: JWT containing user details and expiration time
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHBpcmF0aW9uX3RpbWUiOjE3NTAyNDI1NTMsInVzZXJuYW1lIjoidXNlcm5hbWVfNzY1In0.wDXirYK9DaQyzmWJ7O0b4yQ2ug8avLEAkNqy2QKNWgU
        "400":
          description: invalid request or user credentials
        "500":
          description: server error

  /register:
    post:
      summary: registers user on the server
      requestBody:
        description: user credentials
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCredentials"
      responses:
        "200":
          description: user successfully registered
        "400":
          description: invalid request / user already exist / some other error
        "500":
          description: server error

  /upload:
    post:
      summary: uploads a photo to a server 
      requestBody:
        description: contains the filename and modification date from the client's file system and the file itself
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                filename:
                  type: string
                  example: cat.jpg
                modification_date:
                  $ref: "#/components/schemas/Date"
                file:
                  type: string
                  format: binary
            encoding:
              file:
                contentType: image/jpeg
      responses:
        "200":
          description: photo successfully uploaded
          content:
            text/plain:
              schema:
                type: integer
                description: identifier of the photo on the server
                example: 102

components:
  schemas:
    UserCredentials:
      type: object
      properties:
        username:
          type: string
          example: username
        password:
          type: string
          example: password
    Date:
      type: object
      properties:
        year:
          type: integer
          example: 2025
        month:
          type: integer
          example: 5
        day:
          type: integer
          example: 16
        hour:
          type: integer
          example: 12
        minute:
          type: integer
          example: 30
        second:
          type: integer
          example: 15
