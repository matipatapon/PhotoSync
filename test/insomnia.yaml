type: collection.insomnia.rest/5.0
name: Scratch Pad
meta:
  id: wrk_scratchpad
  created: 1749666536323
  modified: 1749666536323
  description: ""
collection:
  - name: ShouldRegisterAndLogin
    meta:
      id: fld_db58bb6850744e70a9c4cd0c5b92ef97
      created: 1750000094851
      modified: 1750153072138
      sortKey: -1750013044446
      description: ""
    children:
      - url: "{{host}}/register"
        name: Register user
        meta:
          id: req_e476f96fb39342a8921ccee90fc7446e
          created: 1749999403431
          modified: 1750151652149
          isPrivate: false
          description: ""
          sortKey: -1750000100924
        method: POST
        body:
          mimeType: application/json
          text: ""
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: >
            let userId = parseInt(insomnia.environment.get("userId")) + 1

            insomnia.environment.set("userId", userId)


            const thisFolder =
            insomnia.parentFolders.get('ShouldRegisterAndLogin');

            if (thisFolder === undefined) {
            	throw Error('ShouldRegisterAndLogin not found');
            }


            let username =  "username_" + userId

            let password = "password123"


            thisFolder.environment.set("username", username)

            thisFolder.environment.set("password", password)


            let json = `
            	{
            		"username": "${username}",
            		"password": "${password}"
            	}`

            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: |
            insomnia.test('Check if status is 200', () => {
                insomnia.expect(insomnia.response.code).to.eql(200);
            });

            insomnia.test('Check if body is empty', () => {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{host}}/login"
        name: Login user
        meta:
          id: req_bfe10f5617f84a7a8786510bc6d0e085
          created: 1749999403432
          modified: 1750151600878
          isPrivate: false
          description: ""
          sortKey: -1750000100824
        method: GET
        body:
          mimeType: application/json
          text: ""
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: >
            const thisFolder =
            insomnia.parentFolders.get('ShouldRegisterAndLogin');

            if (thisFolder === undefined) {
            	throw Error('ShouldRegisterAndLogin not found');
            }


            let username = thisFolder.environment.get("username")

            let password = thisFolder.environment.get("password")

            let json = `
            	{
            		"username": "${username}",
            		"password": "${password}"
            	}
            `

            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: >
            function parseJwt (token) {
                var base64Url = token.split('.')[1];
                var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
                return JSON.parse(jsonPayload);
            }


            const thisFolder =
            insomnia.parentFolders.get('ShouldRegisterAndLogin');

            if (thisFolder === undefined) {
            	throw Error('ShouldRegisterAndLogin not found');
            }

            let expectedUsername = thisFolder.environment.get('username')


            let token = parseJwt(insomnia.response.text())


            insomnia.test('Check if status is 200', () => {
                insomnia.expect(insomnia.response.code).to.eql(200);
            });

            insomnia.test('Check if jwt has correct username', () => {
            	insomnia.expect(token).to.have.property('username');
            	insomnia.expect(token.username).to.eql(expectedUsername);
            })

            insomnia.test('Check if jwt has exipartion time set to one day from
            now', () => {
            	insomnia.expect(token).to.have.property('expiration_time');
            	let roundedExpectedTime = (Date.now() / 1000) + 60 * 60 * 24
            	let oneMinuteErrorWindow = 60

            	if(Math.abs(roundedExpectedTime - token.expiration_time) > oneMinuteErrorWindow){
            		throw new Error("Expiration time differs too much from expected one!")
            	}
            })
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{host}}/register"
        name: Not register same user second time
        meta:
          id: req_2a2dd675b9ba44b3bd841feb5c777d16
          created: 1750004702384
          modified: 1750151690223
          isPrivate: false
          description: ""
          sortKey: -1750000100811.5
        method: POST
        body:
          mimeType: application/json
          text: ""
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: >
            const thisFolder =
            insomnia.parentFolders.get('ShouldRegisterAndLogin');

            if (thisFolder === undefined) {
            	throw Error('ShouldRegisterAndLogin not found');
            }


            let username = thisFolder.environment.get("username")

            let password = thisFolder.environment.get("password")


            let json = `
            	{
            		"username": "${username}",
            		"password": "${password}"
            	}
            `


            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: |
            insomnia.test('Check if status is 400', () => {
                insomnia.expect(insomnia.response.code).to.eql(400);
            });

            insomnia.test('Check if body is empty', () => {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{host}}/register"
        name: Not register user without username
        meta:
          id: req_35ba36c2076047f9b8488f5c3c6261e9
          created: 1750004880996
          modified: 1750151675456
          isPrivate: false
          description: ""
          sortKey: -1750000100761.5
        method: POST
        body:
          mimeType: application/json
          text: ""
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: |
            let json = `
            	{
            		"password": "password"
            	}
            `

            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: |
            insomnia.test('Check if status is 400', () => {
                insomnia.expect(insomnia.response.code).to.eql(400);
            });

            insomnia.test('Check if body is empty', () => {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{host}}/register"
        name: Not register user with empty username
        meta:
          id: req_c9f6755c3f074811874e75ba06f1411a
          created: 1750005579234
          modified: 1750013341610
          isPrivate: false
          description: ""
          sortKey: -1750000100774
        method: POST
        body:
          mimeType: application/json
          text: ""
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: |
            let json = `
            	{
            		"username": "",
            		"password": "password"
            	}
            `

            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: |
            insomnia.test('Check if status is 400', () => {
                insomnia.expect(insomnia.response.code).to.eql(400);
            });

            insomnia.test('Check if body is empty', () => {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{host}}/register"
        name: Not register user without a password
        meta:
          id: req_26a883ad8a32424ebc6ed12d505720ee
          created: 1750012173287
          modified: 1750151421102
          isPrivate: false
          description: ""
          sortKey: -1750000100749
        method: POST
        body:
          mimeType: application/json
          text: ""
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: |
            let userId = parseInt(insomnia.environment.get("userId")) + 1
            insomnia.environment.set("userId", userId)
            let username =  "username_" + userId

            let json = `
            	{
            		"username": "${username}"
            	}
            `

            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: |
            insomnia.test('Check if status is 400', () => {
                insomnia.expect(insomnia.response.code).to.eql(400);
            });

            insomnia.test('Check if body is empty', () => {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{host}}/register"
        name: Not register user with empty password
        meta:
          id: req_2a88b06dac344210948bd9de2b64ee07
          created: 1750012856277
          modified: 1750013342608
          isPrivate: false
          description: ""
          sortKey: -1750000100799
        method: POST
        body:
          mimeType: application/json
          text: ""
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: |
            let userId = parseInt(insomnia.environment.get("userId")) + 1
            insomnia.environment.set("userId", userId)
            let username =  "username_" + userId

            let json = `
            	{
            		"username": "${username}",
            		"password": ""
            	}
            `

            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: |
            insomnia.test('Check if status is 400', () => {
                insomnia.expect(insomnia.response.code).to.eql(400);
            });

            insomnia.test('Check if body is empty', () => {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{host}}/login"
        name: Not login when invalid password
        meta:
          id: req_b8ae9660e0d44f348b0e4a66ba73fa64
          created: 1750152533991
          modified: 1750152636784
          isPrivate: false
          description: ""
          sortKey: -1750000100649
        method: GET
        headers:
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: >
            const thisFolder =
            insomnia.parentFolders.get('ShouldRegisterAndLogin');

            if (thisFolder === undefined) {
            	throw Error('ShouldRegisterAndLogin not found');
            }


            let username = thisFolder.environment.get("username")

            let password = "invalid password"

            let json = `
            	{
            		"username": "${username}",
            		"password": "${password}"
            	}
            `

            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: |
            insomnia.test('Check if status is 400', () => {
                insomnia.expect(insomnia.response.code).to.eql(400);
            });

            insomnia.test('Check if body is empty', () => {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{host}}/login"
        name: Not login when no password
        meta:
          id: req_ff14f324c2d04b1e9453a463cbd486d5
          created: 1750152676941
          modified: 1750152713192
          isPrivate: false
          description: ""
          sortKey: -1750000100599
        method: GET
        headers:
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: >
            const thisFolder =
            insomnia.parentFolders.get('ShouldRegisterAndLogin');

            if (thisFolder === undefined) {
            	throw Error('ShouldRegisterAndLogin not found');
            }


            let username = thisFolder.environment.get("username")

            let json = `
            	{
            		"username": "${username}"
            	}
            `

            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: |
            insomnia.test('Check if status is 400', () => {
                insomnia.expect(insomnia.response.code).to.eql(400);
            });

            insomnia.test('Check if body is empty', () => {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{host}}/login"
        name: Not login when user does not exist
        meta:
          id: req_7813c3ec1c6c4b598ffa7b298a0f36b3
          created: 1750152747249
          modified: 1750152869263
          isPrivate: false
          description: ""
          sortKey: -1750000100549
        method: GET
        headers:
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: >
            let userId = parseInt(insomnia.environment.get("userId")) + 1

            insomnia.environment.set("userId", userId)


            const thisFolder =
            insomnia.parentFolders.get('ShouldRegisterAndLogin');

            if (thisFolder === undefined) {
            	throw Error('ShouldRegisterAndLogin not found');
            }


            let username = "username_" + userId

            let password = thisFolder.environment.get("password")


            let json = `
            	{
            		"username": "${username}",
            		"password": "${password}"
            	}
            `

            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: |
            insomnia.test('Check if status is 400', () => {
                insomnia.expect(insomnia.response.code).to.eql(400);
            });

            insomnia.test('Check if body is empty', () => {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: "{{host}}/login"
        name: Not login when no user
        meta:
          id: req_550ed63de4324560b979372e7ede04fc
          created: 1750152881290
          modified: 1750152888482
          isPrivate: false
          description: ""
          sortKey: -1750000100499
        method: GET
        headers:
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: >
            const thisFolder =
            insomnia.parentFolders.get('ShouldRegisterAndLogin');

            if (thisFolder === undefined) {
            	throw Error('ShouldRegisterAndLogin not found');
            }


            let password = thisFolder.environment.get("password")


            let json = `
            	{
            		"password": "${password}"
            	}
            `

            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: |
            insomnia.test('Check if status is 400', () => {
                insomnia.expect(insomnia.response.code).to.eql(400);
            });

            insomnia.test('Check if body is empty', () => {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
    scripts:
      afterResponse: ""
      preRequest: ""
    environment:
      username: username_752
      password: password123
cookieJar:
  name: Default Jar
  meta:
    id: jar_99d30891da4bdcebc63947a8fc17f076de878684
    created: 1749666552327
    modified: 1750153072135
environments:
  name: PhotoSync
  meta:
    id: env_99d30891da4bdcebc63947a8fc17f076de878684
    created: 1749666552254
    modified: 1750153072136
    isPrivate: false
  data:
    host: http://localhost:8080
    user_id: 31
    userId: 755
