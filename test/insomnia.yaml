type: collection.insomnia.rest/5.0
name: Scratch Pad
meta:
  id: wrk_scratchpad
  created: 1749857043831
  modified: 1749857043831
  description: ""
collection:
  - name: ShouldRegisterAndLogin
    meta:
      id: fld_8ebbf6bea5454f79a9ba7a254fe2a523
      created: 1750000094851
      modified: 1750003118292
      sortKey: -1750000094851
      description: ""
    children:
      - url: http://localhost:8080/register
        name: Register user
        meta:
          id: req_41503fc0fbe04752b9008c9acafa6b0e
          created: 1749999403431
          modified: 1750002694906
          isPrivate: false
          description: ""
          sortKey: -1750000100924
        method: POST
        body:
          mimeType: application/json
          text: ""
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: >
            const thisFolder =
            insomnia.parentFolders.get('ShouldRegisterAndLogin');

            if (thisFolder === undefined) {
            	throw Error('ShouldRegisterAndLogin not found');
            }


            let userId = thisFolder.environment.get('userId') === undefined ? 1
            : thisFolder.environment.get('userId') + 1

            thisFolder.environment.set('userId', userId) 


            let username =  "user_" + userId

            thisFolder.environment.set("username", username)


            let password = "password123"

            thisFolder.environment.set("password", password)


            let json = `
            	{
            		"username": "${username}",
            		"password": "${password}"
            	}
            `

            console.log(json)


            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: |
            insomnia.test('Check if status is 200', () => {
                insomnia.expect(insomnia.response.code).to.eql(200);
            });

            insomnia.test('Check if body is empty', () => {
                insomnia.expect(insomnia.response.text()).to.eql("");
            });
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
      - url: http://localhost:8080/login
        name: Login user
        meta:
          id: req_48f529511fdf4839a815c324e914a25c
          created: 1749999403432
          modified: 1750003095670
          isPrivate: false
          description: ""
          sortKey: -1750000100824
        method: GET
        body:
          mimeType: application/json
          text: ""
        headers:
          - name: Content-Type
            value: application/json
          - name: User-Agent
            value: insomnia/11.2.0
        scripts:
          preRequest: >
            const thisFolder =
            insomnia.parentFolders.get('ShouldRegisterAndLogin');

            if (thisFolder === undefined) {
            	throw Error('ShouldRegisterAndLogin not found');
            }


            let username = thisFolder.environment.get("username")

            let password = thisFolder.environment.get("password")

            let json = `
            	{
            		"username": "${username}",
            		"password": "${password}"
            	}
            `

            insomnia.request.body.update({
              mode: 'raw',
              raw: json,
            });
          afterResponse: >
            function parseJwt (token) {
                var base64Url = token.split('.')[1];
                var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
                return JSON.parse(jsonPayload);
            }


            const thisFolder =
            insomnia.parentFolders.get('ShouldRegisterAndLogin');

            if (thisFolder === undefined) {
            	throw Error('ShouldRegisterAndLogin not found');
            }

            let expectedUsername = thisFolder.environment.get('username')


            let token = parseJwt(insomnia.response.text())


            insomnia.test('Check if status is 200', () => {
                insomnia.expect(insomnia.response.code).to.eql(200);
            });

            insomnia.test('Check if jwt has correct username', () => {
            	insomnia.expect(token).to.have.property('username');
            	insomnia.expect(token.username).to.eql(expectedUsername);
            })

            insomnia.test('Check if jwt has exipartion time set to one day from
            now', () => {
            	insomnia.expect(token).to.have.property('expiration_time');
            	let roundedExpectedTime = (Date.now() / 1000) + 60 * 60 * 24
            	let oneMinuteErrorWindow = 60

            	if(Math.abs(roundedExpectedTime - token.expiration_time) > oneMinuteErrorWindow){
            		throw new Error("Expiration time differs too much from expected one!")
            	}
            })
        settings:
          renderRequestBody: true
          encodeUrl: true
          followRedirects: global
          cookies:
            send: true
            store: true
          rebuildPath: true
    environment:
      id: 1
      userId: 29
      username: user_29
      password: password123
cookieJar:
  name: Default Jar
  meta:
    id: jar_99d30891da4bdcebc63947a8fc17f076de878684
    created: 1749857051813
    modified: 1750003118291
environments:
  name: PhotoSync
  meta:
    id: env_99d30891da4bdcebc63947a8fc17f076de878684
    created: 1749857051749
    modified: 1750003118292
    isPrivate: false
  data:
    user_id: "1"
